/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.ultralinked.voip.imapi;

public class imapij implements imapijConstants {
  public static void setGCallDataID_IM(long value) {
    imapijJNI.gCallDataID_IM_set(value);
  }

  public static long getGCallDataID_IM() {
    return imapijJNI.gCallDataID_IM_get();
  }

  public static void setIM_HOST(String value) {
    imapijJNI.IM_HOST_set(value);
  }

  public static String getIM_HOST() {
    return imapijJNI.IM_HOST_get();
  }

  public static void setIM_VIRTUAL_HOST(String value) {
    imapijJNI.IM_VIRTUAL_HOST_set(value);
  }

  public static String getIM_VIRTUAL_HOST() {
    return imapijJNI.IM_VIRTUAL_HOST_get();
  }

  public static void setIM_ENCRYPT_FLAG(String value) {
    imapijJNI.IM_ENCRYPT_FLAG_set(value);
  }

  public static String getIM_ENCRYPT_FLAG() {
    return imapijJNI.IM_ENCRYPT_FLAG_get();
  }

  public static void setIM_DOMAIN(String value) {
    imapijJNI.IM_DOMAIN_set(value);
  }

  public static String getIM_DOMAIN() {
    return imapijJNI.IM_DOMAIN_get();
  }

  public static void setIM_MUC_DOMAIN(String value) {
    imapijJNI.IM_MUC_DOMAIN_set(value);
  }

  public static String getIM_MUC_DOMAIN() {
    return imapijJNI.IM_MUC_DOMAIN_get();
  }

  public static void setIM_PORT(int value) {
    imapijJNI.IM_PORT_set(value);
  }

  public static int getIM_PORT() {
    return imapijJNI.IM_PORT_get();
  }

  public static void setImMsgRecord(SWIGTYPE_p_void value) {
    imapijJNI.imMsgRecord_set(SWIGTYPE_p_void.getCPtr(value));
  }

  public static SWIGTYPE_p_void getImMsgRecord() {
    long cPtr = imapijJNI.imMsgRecord_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void setOFFLINE_FILE_TIMER(long value) {
    imapijJNI.OFFLINE_FILE_TIMER_set(value);
  }

  public static long getOFFLINE_FILE_TIMER() {
    return imapijJNI.OFFLINE_FILE_TIMER_get();
  }

  public static void setIM_LOG_PATH(String value) {
    imapijJNI.IM_LOG_PATH_set(value);
  }

  public static String getIM_LOG_PATH() {
    return imapijJNI.IM_LOG_PATH_get();
  }

  public static void setSET_IM_LOG_PATH_STATE(boolean value) {
    imapijJNI.SET_IM_LOG_PATH_STATE_set(value);
  }

  public static boolean getSET_IM_LOG_PATH_STATE() {
    return imapijJNI.SET_IM_LOG_PATH_STATE_get();
  }

  public static void setIM_DB_PATH(String value) {
    imapijJNI.IM_DB_PATH_set(value);
  }

  public static String getIM_DB_PATH() {
    return imapijJNI.IM_DB_PATH_get();
  }

  public static void setSET_IM_DB_PATH_STATE(boolean value) {
    imapijJNI.SET_IM_DB_PATH_STATE_set(value);
  }

  public static boolean getSET_IM_DB_PATH_STATE() {
    return imapijJNI.SET_IM_DB_PATH_STATE_get();
  }

  public static void setIM_IMAGE_PATH(String value) {
    imapijJNI.IM_IMAGE_PATH_set(value);
  }

  public static String getIM_IMAGE_PATH() {
    return imapijJNI.IM_IMAGE_PATH_get();
  }

  public static void setSET_IM_IMAGE_PATH_STATE(boolean value) {
    imapijJNI.SET_IM_IMAGE_PATH_STATE_set(value);
  }

  public static boolean getSET_IM_IMAGE_PATH_STATE() {
    return imapijJNI.SET_IM_IMAGE_PATH_STATE_get();
  }

  public static void setSET_IM_ENCRYPT(boolean value) {
    imapijJNI.SET_IM_ENCRYPT_set(value);
  }

  public static boolean getSET_IM_ENCRYPT() {
    return imapijJNI.SET_IM_ENCRYPT_get();
  }

  public static void setIMReconnectTimes(int value) {
    imapijJNI.IMReconnectTimes_set(value);
  }

  public static int getIMReconnectTimes() {
    return imapijJNI.IMReconnectTimes_get();
  }

  public static void netrtcim_set_config(String config_key, String config_value) {
    imapijJNI.netrtcim_set_config(config_key, config_value);
  }

  public static void netrtcim_log(int level, String log) {
    imapijJNI.netrtcim_log(level, log);
  }

  public static void netimFlushLog() {
    imapijJNI.netimFlushLog();
  }

  public static String netrtcim_version() {
    return imapijJNI.netrtcim_version();
  }

  public static long netrtcim_hashmap_init() {
    return imapijJNI.netrtcim_hashmap_init();
  }

  public static int netrtcim_hashmap_set(long hmap_id, String key, String value) {
    return imapijJNI.netrtcim_hashmap_set(hmap_id, key, value);
  }

  public static long netrtcim_hashmap_get(long hmap_id, String key) {
    return imapijJNI.netrtcim_hashmap_get(hmap_id, key);
  }

  public static String netrtcim_hashmap_getstr(long hmap_id, String key) {
    return imapijJNI.netrtcim_hashmap_getstr(hmap_id, key);
  }

  public static long netrtcim_hashmap_first(long hmap_id) {
    return imapijJNI.netrtcim_hashmap_first(hmap_id);
  }

  public static long netrtcim_hashmap_next(long hmap_index_id) {
    return imapijJNI.netrtcim_hashmap_next(hmap_index_id);
  }

  public static String netrtcim_hashmap_this_key(long hmap_index_id) {
    return imapijJNI.netrtcim_hashmap_this_key(hmap_index_id);
  }

  public static long netrtcim_hashmap_this_value(long hmap_index_id) {
    return imapijJNI.netrtcim_hashmap_this_value(hmap_index_id);
  }

  public static long netrtcim_hashmap_count(long hmap_id) {
    return imapijJNI.netrtcim_hashmap_count(hmap_id);
  }

  public static void netrtcim_hashmap_clear(long hmap_id) {
    imapijJNI.netrtcim_hashmap_clear(hmap_id);
  }

  public static void netrtcim_hashmap_free(long hmap_id) {
    imapijJNI.netrtcim_hashmap_free(hmap_id);
  }

  public static void netrtcim_setcallback(eIMCALLBACK_TYPE callback_type, SWIGTYPE_p_void pCallBack) {
    imapijJNI.netrtcim_setcallback(callback_type.swigValue(), SWIGTYPE_p_void.getCPtr(pCallBack));
  }

  public static void setF_onBroadcastRecv_callback(SWIGTYPE_p_f_p_q_const__c_Broadcast__void value) {
    imapijJNI.f_onBroadcastRecv_callback_set(SWIGTYPE_p_f_p_q_const__c_Broadcast__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_p_q_const__c_Broadcast__void getF_onBroadcastRecv_callback() {
    long cPtr = imapijJNI.f_onBroadcastRecv_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__c_Broadcast__void(cPtr, false);
  }

  public static void setF_onMsgRecv_callback(SWIGTYPE_p_f_p_q_const__c_Message__void value) {
    imapijJNI.f_onMsgRecv_callback_set(SWIGTYPE_p_f_p_q_const__c_Message__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_p_q_const__c_Message__void getF_onMsgRecv_callback() {
    long cPtr = imapijJNI.f_onMsgRecv_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__c_Message__void(cPtr, false);
  }

  public static void setF_onMsgStatusChanged_callback(SWIGTYPE_p_f_p_q_const__c_Message__void value) {
    imapijJNI.f_onMsgStatusChanged_callback_set(SWIGTYPE_p_f_p_q_const__c_Message__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_p_q_const__c_Message__void getF_onMsgStatusChanged_callback() {
    long cPtr = imapijJNI.f_onMsgStatusChanged_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__c_Message__void(cPtr, false);
  }

  public static void setF_onSockEvent_callback(SWIGTYPE_p_f_int__void value) {
    imapijJNI.f_onSockEvent_callback_set(SWIGTYPE_p_f_int__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_int__void getF_onSockEvent_callback() {
    long cPtr = imapijJNI.f_onSockEvent_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_int__void(cPtr, false);
  }

  public static void setF_onPIngOut_callback(SWIGTYPE_p_f___void value) {
    imapijJNI.f_onPIngOut_callback_set(SWIGTYPE_p_f___void.getCPtr(value));
  }

  public static SWIGTYPE_p_f___void getF_onPIngOut_callback() {
    long cPtr = imapijJNI.f_onPIngOut_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f___void(cPtr, false);
  }

  public static void setF_onFriendSync_callback(SWIGTYPE_p_f_p_q_const__char_enum_eShow_p_q_const__char__void value) {
    imapijJNI.f_onFriendSync_callback_set(SWIGTYPE_p_f_p_q_const__char_enum_eShow_p_q_const__char__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_p_q_const__char_enum_eShow_p_q_const__char__void getF_onFriendSync_callback() {
    long cPtr = imapijJNI.f_onFriendSync_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__char_enum_eShow_p_q_const__char__void(cPtr, false);
  }

  public static void setF_onSubscribe_callback(SWIGTYPE_p_f_p_q_const__char_bool__void value) {
    imapijJNI.f_onSubscribe_callback_set(SWIGTYPE_p_f_p_q_const__char_bool__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_p_q_const__char_bool__void getF_onSubscribe_callback() {
    long cPtr = imapijJNI.f_onSubscribe_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__char_bool__void(cPtr, false);
  }

  public static void setF_onUnSubscribed_callback(SWIGTYPE_p_f_p_q_const__char__void value) {
    imapijJNI.f_onUnSubscribed_callback_set(SWIGTYPE_p_f_p_q_const__char__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_p_q_const__char__void getF_onUnSubscribed_callback() {
    long cPtr = imapijJNI.f_onUnSubscribed_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__char__void(cPtr, false);
  }

  public static void setF_onVCardRecv_callback(SWIGTYPE_p_f_bool_p_q_const__char_p_q_const__c_VCard__void value) {
    imapijJNI.f_onVCardRecv_callback_set(SWIGTYPE_p_f_bool_p_q_const__char_p_q_const__c_VCard__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_bool_p_q_const__char_p_q_const__c_VCard__void getF_onVCardRecv_callback() {
    long cPtr = imapijJNI.f_onVCardRecv_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_bool_p_q_const__char_p_q_const__c_VCard__void(cPtr, false);
  }

  public static void setF_onHistory_callback(SWIGTYPE_p_f_p_q_const__char_int_int__void value) {
    imapijJNI.f_onHistory_callback_set(SWIGTYPE_p_f_p_q_const__char_int_int__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_p_q_const__char_int_int__void getF_onHistory_callback() {
    long cPtr = imapijJNI.f_onHistory_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_q_const__char_int_int__void(cPtr, false);
  }

  public static void setF_onConversation_callback(SWIGTYPE_p_f_enum_eConversationEvent_unsigned_int__void value) {
    imapijJNI.f_onConversation_callback_set(SWIGTYPE_p_f_enum_eConversationEvent_unsigned_int__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_enum_eConversationEvent_unsigned_int__void getF_onConversation_callback() {
    long cPtr = imapijJNI.f_onConversation_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_enum_eConversationEvent_unsigned_int__void(cPtr, false);
  }

  public static void setF_onMuc_callback(SWIGTYPE_p_f_enum_eMucEvent_unsigned_int__void value) {
    imapijJNI.f_onMuc_callback_set(SWIGTYPE_p_f_enum_eMucEvent_unsigned_int__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_enum_eMucEvent_unsigned_int__void getF_onMuc_callback() {
    long cPtr = imapijJNI.f_onMuc_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_enum_eMucEvent_unsigned_int__void(cPtr, false);
  }

  public static void setF_onFileTransfer_callback(SWIGTYPE_p_f_enum_eFileTransferCase_p_q_const__c_Message__void value) {
    imapijJNI.f_onFileTransfer_callback_set(SWIGTYPE_p_f_enum_eFileTransferCase_p_q_const__c_Message__void.getCPtr(value));
  }

  public static SWIGTYPE_p_f_enum_eFileTransferCase_p_q_const__c_Message__void getF_onFileTransfer_callback() {
    long cPtr = imapijJNI.f_onFileTransfer_callback_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_enum_eFileTransferCase_p_q_const__c_Message__void(cPtr, false);
  }

  public static int netimLoginXmpp(String usrName, String pwd) {
    return imapijJNI.netimLoginXmpp(usrName, pwd);
  }

  public static int netimReconnectXmpp_current_Account() {
    return imapijJNI.netimReconnectXmpp_current_Account();
  }

  public static FriendInfo[] netimGetRoster() {
    final long[] arr = imapijJNI.netimGetRoster();
    FriendInfo[] ret = new FriendInfo[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new FriendInfo(arr[i], false);
    }
    return ret;
  }

  public static int netimReleaseRoster(FriendInfo addr, int size) {
    return imapijJNI.netimReleaseRoster(FriendInfo.getCPtr(addr), addr, size);
  }

  public static int netimGetVCard(String name) {
    return imapijJNI.netimGetVCard(name);
  }

  public static void netReleaseVCard(c_VCard vcard) {
    imapijJNI.netReleaseVCard(c_VCard.getCPtr(vcard), vcard);
  }

  public static int netimSetVCard(c_VCard vcard) {
    return imapijJNI.netimSetVCard(c_VCard.getCPtr(vcard), vcard);
  }

  public static c_Group[] netimGetRooms() {
    final long[] arr = imapijJNI.netimGetRooms();
    c_Group[] ret = new c_Group[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Group(arr[i], false);
    }
    return ret;
  }

  public static int netimReleaseRooms(c_Group addr, int size) {
    return imapijJNI.netimReleaseRooms(c_Group.getCPtr(addr), addr, size);
  }

  public static int netimTriggerGetRoomMembers(String room) {
    return imapijJNI.netimTriggerGetRoomMembers(room);
  }

  public static int netimTriggerGetMessageHistory(String chatID, int count, int messageID, boolean isGroup) {
    return imapijJNI.netimTriggerGetMessageHistory(chatID, count, messageID, isGroup);
  }

  public static c_GroupMember[] netimGetRoomMembers(String room_name) {
    final long[] arr = imapijJNI.netimGetRoomMembers(room_name);
    c_GroupMember[] ret = new c_GroupMember[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_GroupMember(arr[i], false);
    }
    return ret;
  }

  public static int netimReleaseRoomMembers(c_GroupMember gmAddr, int size) {
    return imapijJNI.netimReleaseRoomMembers(c_GroupMember.getCPtr(gmAddr), gmAddr, size);
  }

  public static int netimInviteFriend(String userName) {
    return imapijJNI.netimInviteFriend(userName);
  }

  public static int netimAgreeToBeFriend(String userName, boolean isRepeat) {
    return imapijJNI.netimAgreeToBeFriend(userName, isRepeat);
  }

  public static int netimRejectToBeFriend(String userName) {
    return imapijJNI.netimRejectToBeFriend(userName);
  }

  public static int netimRemoveFriend(String userName) {
    return imapijJNI.netimRemoveFriend(userName);
  }

  public static int netimSetUserStatus(eShow show) {
    return imapijJNI.netimSetUserStatus(show.swigValue());
  }

  public static eShow netimGetFriendStatus(String friend_name) {
    return eShow.swigToEnum(imapijJNI.netimGetFriendStatus(friend_name));
  }

  public static c_Broadcast[] netimSendCustomBroadcastChat(String toChatId, String msg, int chatType) {
    final long[] arr = imapijJNI.netimSendCustomBroadcastChat(toChatId, msg, chatType);
    c_Broadcast[] ret = new c_Broadcast[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Broadcast(arr[i], false);
    }
    return ret;
  }

  public static c_Broadcast[] netimSendCustomBroadcastChatArray(String toChatId, byte[] msgArr, int chatType) {
    final long[] arr = imapijJNI.netimSendCustomBroadcastChatArray(toChatId, msgArr, chatType);
    c_Broadcast[] ret = new c_Broadcast[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Broadcast(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimInsertCustomChat(String chat_id, String fromUser, String toUser, String msg) {
    final long[] arr = imapijJNI.netimInsertCustomChat(chat_id, fromUser, toUser, msg);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimInsertCustomChatArray(String chat_id, String fromUser, String toUser, byte[] msgArr) {
    final long[] arr = imapijJNI.netimInsertCustomChatArray(chat_id, fromUser, toUser, msgArr);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendCustomChat(String toUser, String msg) {
    final long[] arr = imapijJNI.netimSendCustomChat(toUser, msg);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendCustomChatArray(String toUser, byte[] msgArr) {
    final long[] arr = imapijJNI.netimSendCustomChatArray(toUser, msgArr);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendCustomGroupChat(String toMuc, String msg) {
    final long[] arr = imapijJNI.netimSendCustomGroupChat(toMuc, msg);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendCustomGroupChatArray(String toMuc, byte[] msgArr) {
    final long[] arr = imapijJNI.netimSendCustomGroupChatArray(toMuc, msgArr);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimUpdateMessageBody(int msgID, int chatType, String msg) {
    final long[] arr = imapijJNI.netimUpdateMessageBody(msgID, chatType, msg);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimUpdateMessageBodyArray(int msgID, int chatType, byte[] msgArr) {
    final long[] arr = imapijJNI.netimUpdateMessageBodyArray(msgID, chatType, msgArr);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendChat(String toUser, String msg) {
    final long[] arr = imapijJNI.netimSendChat(toUser, msg);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendChatArray(String toUser, byte[] msgArr) {
    final long[] arr = imapijJNI.netimSendChatArray(toUser, msgArr);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendGroupChat(String toMuc, String msg) {
    final long[] arr = imapijJNI.netimSendGroupChat(toMuc, msg);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimSendGroupChatArray(String toMuc, byte[] msgArr) {
    final long[] arr = imapijJNI.netimSendGroupChatArray(toMuc, msgArr);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgForSingleChat(String toUser, String fileName, String MD5, int fileSize) {
    final long[] arr = imapijJNI.netimCreateFileMsgForSingleChat(toUser, fileName, MD5, fileSize);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgForSingleChatArray(String toUser, byte[] stringBody, String MD5, int fileSize) {
    final long[] arr = imapijJNI.netimCreateFileMsgForSingleChatArray(toUser, stringBody, MD5, fileSize);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgForGroupChat(String toMuc, String fileName, String MD5, int fileSize) {
    final long[] arr = imapijJNI.netimCreateFileMsgForGroupChat(toMuc, fileName, MD5, fileSize);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgForGroupChatArray(String toMuc, byte[] stringBody, String MD5, int fileSize) {
    final long[] arr = imapijJNI.netimCreateFileMsgForGroupChatArray(toMuc, stringBody, MD5, fileSize);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgWithThumbnailForSingleChat(String toUser, String fileName, String MD5, int fileSize, String thumbnailData) {
    final long[] arr = imapijJNI.netimCreateFileMsgWithThumbnailForSingleChat(toUser, fileName, MD5, fileSize, thumbnailData);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgWithThumbnailForSingleChatArray(String toUser, byte[] stringBody, String MD5, int fileSize, String thumbnailData) {
    final long[] arr = imapijJNI.netimCreateFileMsgWithThumbnailForSingleChatArray(toUser, stringBody, MD5, fileSize, thumbnailData);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgWithThumbnailForGroupChat(String toMuc, String fileName, String MD5, int fileSize, String thumbnailData) {
    final long[] arr = imapijJNI.netimCreateFileMsgWithThumbnailForGroupChat(toMuc, fileName, MD5, fileSize, thumbnailData);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] netimCreateFileMsgWithThumbnailForGroupChatArray(String toMuc, byte[] stringBody, String MD5, int fileSize, String thumbnailData) {
    final long[] arr = imapijJNI.netimCreateFileMsgWithThumbnailForGroupChatArray(toMuc, stringBody, MD5, fileSize, thumbnailData);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static int netimPrepareReSendFileMsg(int conversationID, int msg_id) {
    return imapijJNI.netimPrepareReSendFileMsg(conversationID, msg_id);
  }

  public static int netimSendFileMsg(int conversationID, int msg_id, boolean isUpload) {
    return imapijJNI.netimSendFileMsg(conversationID, msg_id, isUpload);
  }

  public static int netimResendMsg(int conversationID, int msg_id) {
    return imapijJNI.netimResendMsg(conversationID, msg_id);
  }

  public static int netimLookupAndJoinMuc(String roomName) {
    return imapijJNI.netimLookupAndJoinMuc(roomName);
  }

  public static int netimJoinMuc(String roomName) {
    return imapijJNI.netimJoinMuc(roomName);
  }

  public static int netimCreateMuc(String mucTitle) {
    return imapijJNI.netimCreateMuc(mucTitle);
  }

  public static int netimCreateMucArray(byte[] stringBody) {
    return imapijJNI.netimCreateMucArray(stringBody);
  }

  public static int netimModifyMucTitle(String mucID, String mucTitle) {
    return imapijJNI.netimModifyMucTitle(mucID, mucTitle);
  }

  public static int netimModifyMucTitleArray(String mucID, byte[] stringBody) {
    return imapijJNI.netimModifyMucTitleArray(mucID, stringBody);
  }

  public static int netimJoinMucDefault() {
    return imapijJNI.netimJoinMucDefault();
  }

  public static int netimInviteToMucDefault(String user) {
    return imapijJNI.netimInviteToMucDefault(user);
  }

  public static int netimInviteToMuc(String user, String mucID, String reason) {
    return imapijJNI.netimInviteToMuc(user, mucID, reason);
  }

  public static int netimInviteToMucArray(String user, String mucID, byte[] stringBody) {
    return imapijJNI.netimInviteToMucArray(user, mucID, stringBody);
  }

  public static int netimKickFromMuc(String mucID, String member, String reason) {
    return imapijJNI.netimKickFromMuc(mucID, member, reason);
  }

  public static int netimLeaveMuc(String mucID) {
    return imapijJNI.netimLeaveMuc(mucID);
  }

  public static void netimDisconnectXmpp() {
    imapijJNI.netimDisconnectXmpp();
  }

  public static void netimDisposeXmpp() {
    imapijJNI.netimDisposeXmpp();
  }

  public static c_Conversation[] getConversationList(int end, int begin) {
    final long[] arr = imapijJNI.getConversationList(end, begin);
    c_Conversation[] ret = new c_Conversation[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Conversation(arr[i], false);
    }
    return ret;
  }

  public static c_Conversation[] getConversationListByFlag(int end, int begin, String conversionflag, boolean contains) {
    final long[] arr = imapijJNI.getConversationListByFlag(end, begin, conversionflag, contains);
    c_Conversation[] ret = new c_Conversation[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Conversation(arr[i], false);
    }
    return ret;
  }

  public static c_Conversation[] getConversationListByType(int end, int begin, int chatType) {
    final long[] arr = imapijJNI.getConversationListByType(end, begin, chatType);
    c_Conversation[] ret = new c_Conversation[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Conversation(arr[i], false);
    }
    return ret;
  }

  public static int setConversationPriority(int conversationID, boolean isSetTop) {
    return imapijJNI.setConversationPriority(conversationID, isSetTop);
  }

  public static c_Conversation[] getConversationByGlobalID(String global_id, boolean isGroup) {
    final long[] arr = imapijJNI.getConversationByGlobalID(global_id, isGroup);
    c_Conversation[] ret = new c_Conversation[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Conversation(arr[i], false);
    }
    return ret;
  }

  public static c_Conversation[] getConversationByConversationID(int conversationID) {
    final long[] arr = imapijJNI.getConversationByConversationID(conversationID);
    c_Conversation[] ret = new c_Conversation[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Conversation(arr[i], false);
    }
    return ret;
  }

  public static int releaseConversation(c_Conversation c_conv, int size) {
    return imapijJNI.releaseConversation(c_Conversation.getCPtr(c_conv), c_conv, size);
  }

  public static int createConversation(String global_id, boolean isGroup) {
    return imapijJNI.createConversation(global_id, isGroup);
  }

  public static int setConversationDraft(int conversationID, String draft) {
    return imapijJNI.setConversationDraft(conversationID, draft);
  }

  public static int setConversationDraftArray(int conversationID, byte[] stringBody) {
    return imapijJNI.setConversationDraftArray(conversationID, stringBody);
  }

  public static c_Message[] getMessageByMsgID(int msg_id, boolean isGroup) {
    final long[] arr = imapijJNI.getMessageByMsgID(msg_id, isGroup);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static int releaseMessage(c_Message c_msg, int size) {
    return imapijJNI.releaseMessage(c_Message.getCPtr(c_msg), c_msg, size);
  }

  public static c_Message[] getMessageList(int conversationID, int end, int begin) {
    final long[] arr = imapijJNI.getMessageList(conversationID, end, begin);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] getMessageListBesideMessageID(int conversationID, int mid, int count, boolean isBeforeMsg) {
    final long[] arr = imapijJNI.getMessageListBesideMessageID(conversationID, mid, count, isBeforeMsg);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Conversation[] getConversationListWithKeywordMessage(String keyword) {
    final long[] arr = imapijJNI.getConversationListWithKeywordMessage(keyword);
    c_Conversation[] ret = new c_Conversation[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Conversation(arr[i], false);
    }
    return ret;
  }

  public static c_Conversation[] getConversationListWithKeywordMessageArray(byte[] stringBody) {
    final long[] arr = imapijJNI.getConversationListWithKeywordMessageArray(stringBody);
    c_Conversation[] ret = new c_Conversation[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Conversation(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] getMessageListOfConversationByKeyword(int conversationID, String keyword) {
    final long[] arr = imapijJNI.getMessageListOfConversationByKeyword(conversationID, keyword);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static c_Message[] getMessageListOfConversationByKeywordArray(int conversationID, byte[] stringBody) {
    final long[] arr = imapijJNI.getMessageListOfConversationByKeywordArray(conversationID, stringBody);
    c_Message[] ret = new c_Message[arr.length];
    for (int i = 0; i < arr.length; ++i) {
      ret[i] = new c_Message(arr[i], false);
    }
    return ret;
  }

  public static int setOneMsgReadState(int conversationID, int msg_id) {
    return imapijJNI.setOneMsgReadState(conversationID, msg_id);
  }

  public static int setConversationAllMsgReadState(int conversationID) {
    return imapijJNI.setConversationAllMsgReadState(conversationID);
  }

  public static int getCountOfConversationUnreadMsg(int conversationID) {
    return imapijJNI.getCountOfConversationUnreadMsg(conversationID);
  }

  public static int getCountOfAllUnreadMsg() {
    return imapijJNI.getCountOfAllUnreadMsg();
  }

  public static int getCountOfAllUnreadMsgByConvType(boolean isGroup) {
    return imapijJNI.getCountOfAllUnreadMsgByConvType(isGroup);
  }

  public static int deleteOneMessage(int conversationID, int msg_id) {
    return imapijJNI.deleteOneMessage(conversationID, msg_id);
  }

  public static int deleteMultipleMessages(int conversationID, int[] msg_id_array, int size) {
    return imapijJNI.deleteMultipleMessages(conversationID, msg_id_array, size);
  }

  public static int deleteAllMessages(int conversationID) {
    return imapijJNI.deleteAllMessages(conversationID);
  }

  public static int deleteAllConversationMessages() {
    return imapijJNI.deleteAllConversationMessages();
  }

  public static int deleteCoversation(int conversationID) {
    return imapijJNI.deleteCoversation(conversationID);
  }

  public static int updateFileNameOfFileMsg(int conversationID, int msg_id, String fileName) {
    return imapijJNI.updateFileNameOfFileMsg(conversationID, msg_id, fileName);
  }

  public static int updateFileNameOfFileMsgArray(int conversationID, int msg_id, byte[] stringBody) {
    return imapijJNI.updateFileNameOfFileMsgArray(conversationID, msg_id, stringBody);
  }

  public static int updateMsgStatus(int conversationID, int msg_id, eMessageStatus eMStatus) {
    return imapijJNI.updateMsgStatus(conversationID, msg_id, eMStatus.swigValue());
  }

  public static int setConversationMute(String chatId, boolean isGroup, int muteFlag) {
    return imapijJNI.setConversationMute(chatId, isGroup, muteFlag);
  }

  public static int setConversationProperty(String chatId, boolean isGroup, String properties) {
    return imapijJNI.setConversationProperty(chatId, isGroup, properties);
  }

  public static String getConversationProperties(String chatId, boolean isGroup) {
    return imapijJNI.getConversationProperties(chatId, isGroup);
  }

  public static int getConversationIsMute(String chatId) {
    return imapijJNI.getConversationIsMute(chatId);
  }

  public static int updateFileSizeOfFileMsg(int conversationID, int msg_id, int fileCurSize, int fileTotalSize) {
    return imapijJNI.updateFileSizeOfFileMsg(conversationID, msg_id, fileCurSize, fileTotalSize);
  }

  public static long getThumbnailDataByMD5(String MD5) {
    return imapijJNI.getThumbnailDataByMD5(MD5);
  }

  public static int netimRunningState() {
    return imapijJNI.netimRunningState();
  }

  public static int netimSendFileOnline(String filePath, String fileName, String toJid) {
    return imapijJNI.netimSendFileOnline(filePath, fileName, toJid);
  }

  public static int netimSendAppToken(String token, String device) {
    return imapijJNI.netimSendAppToken(token, device);
  }

  public static int c_netrtcapi_msgrecv_callback(c_Message arg0) {
    return imapijJNI.c_netrtcapi_msgrecv_callback(c_Message.getCPtr(arg0), arg0);
  }

  public static int c_netrtcapi_msg_status_changed_callback(c_Message arg0) {
    return imapijJNI.c_netrtcapi_msg_status_changed_callback(c_Message.getCPtr(arg0), arg0);
  }

  public static int c_netrtcapi_sockevent_callback(int status) {
    return imapijJNI.c_netrtcapi_sockevent_callback(status);
  }

  public static int c_netrtcapi_pingtimeout_callback() {
    return imapijJNI.c_netrtcapi_pingtimeout_callback();
  }

  public static int c_netrtcapi_friendsync_callback(String chat, eShow show, String status) {
    return imapijJNI.c_netrtcapi_friendsync_callback(chat, show.swigValue(), status);
  }

  public static int c_netrtcapi_Subscribe_callback(String from, boolean isRepeat) {
    return imapijJNI.c_netrtcapi_Subscribe_callback(from, isRepeat);
  }

  public static int c_netrtcapi_UnSubscribed_callback(String from) {
    return imapijJNI.c_netrtcapi_UnSubscribed_callback(from);
  }

  public static int c_netrtcapi_NetrtcXmpp_onVCardRecvCallback(boolean result, String name, c_VCard vcard) {
    return imapijJNI.c_netrtcapi_NetrtcXmpp_onVCardRecvCallback(result, name, c_VCard.getCPtr(vcard), vcard);
  }

  public static int c_netrtcapi_NetrtcXmpp_onMucCallback(eMucEvent event, long hmap_id) {
    return imapijJNI.c_netrtcapi_NetrtcXmpp_onMucCallback(event.swigValue(), hmap_id);
  }

  public static int c_netrtcapi_NetrtcXmpp_onConversationCallback(eConversationEvent event, long hmap_id) {
    return imapijJNI.c_netrtcapi_NetrtcXmpp_onConversationCallback(event.swigValue(), hmap_id);
  }

  public static int c_netrtcapi_NetrtcXmpp_onFileTransferCallback(eFileTransferCase event, c_Message msg) {
    return imapijJNI.c_netrtcapi_NetrtcXmpp_onFileTransferCallback(event.swigValue(), c_Message.getCPtr(msg), msg);
  }

  public static int c_netrtcapi_broadcastrecv_callback(c_Broadcast arg0) {
    return imapijJNI.c_netrtcapi_broadcastrecv_callback(c_Broadcast.getCPtr(arg0), arg0);
  }

  public static int c_netrtcapi_histroy_callback(String conversation, int chatType, int count) {
    return imapijJNI.c_netrtcapi_histroy_callback(conversation, chatType, count);
  }

  public static void setRegisteredIMCallbackObject(NetrtcimCallback value) {
    imapijJNI.registeredIMCallbackObject_set(NetrtcimCallback.getCPtr(value), value);
  }

  public static NetrtcimCallback getRegisteredIMCallbackObject() {
    long cPtr = imapijJNI.registeredIMCallbackObject_get();
    return (cPtr == 0) ? null : new NetrtcimCallback(cPtr, false);
  }

  public static void setIMCallbackObject(NetrtcimCallback callback) {
    imapijJNI.setIMCallbackObject(NetrtcimCallback.getCPtr(callback), callback);
  }

}
